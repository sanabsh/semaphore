
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <semaphore.h>
using namespace std;

float trap (int a)
{
  float x = 10 * (abs (sin (0.25 * a)));
  float y = 10 * (abs (sin (0.25 * (a + 1))));
  float res = ((x + y) / 2) * 1;

  return res;



}


int
main (void)
{
  pid_t pid;
  sem_t *semaphore_child;
  semaphore_child=sem_open("semaphore_child",O_CREAT|O_EXCL,S_IRUSR|S_IWUSR);
  sem_init(semaphore_child,1,1);
  sem_t *semaphore_parent;
  semaphore_parent=sem_open("semaphore_parent",O_CREAT|O_EXCL,S_IRUSR|S_IWUSR);
  sem_init(semaphore_parent,1,1);
  
 float *moshtarak=(float*)mmap(0,sizeof(float),PROT_READ|PROT_WRITE,MAP_ANON|MAP_SHARED,-1,0);
  int j;
  float reslut;
  for (j = 0; j < 10; j++)
    {
      pid = fork ();

      if (pid == -1)
	{

	  fprintf (stderr, "can't fork, error %d\n", errno);
	  exit (EXIT_FAILURE);
	}
      else if (pid == 0)
	{


      sem_wait(semaphore_child);
	  *moshtarak = trap (j);
	  cout << "child: " << j << " reslut is: " << *moshtarak << endl;
	  sem_post(semaphore_parent);
	  exit (EXIT_SUCCESS);
	}
      /* Note that we do not use exit() */
    }

  /* When fork() returns a positive number, we are in the parent process
   * (the fork return value is the PID of the newly created child process)
   * Again we count up to ten.
   */
  if (pid > 0)
    {
     int vzit;

      int i;
      float sum = 0;
      for (i = 0; i < 10; i++)
	{
	  wait (&vzit);
	  if (WIFEXITED (vzit))
	    {
	     sem_wait(semaphore_parent);   
	      sum += *moshtarak;
	      cout << "parent:" << i << " sum is: " << sum << endl;
	      sem_post(semaphore_child);
	    }


	}
    }
  exit (0);

  return 0;
}
